import math
import numpy as np


DOMAIN = (0, 100)
ELEMS = 10

def f(x) -> int:
    return 5 * math.pow(x, 3) - 2 * math.pow(x, 2) + 3 * x - 17

#---------------------------------------------------------------------------------#
def f4(x, y):
    return x + (2 * y)

def f5(x):
    return math.sin(x / 2) + 2 * math.cos(x)

def f6(x, y):
    return x**2 + 3 * x * y - 7 * y + 1

step = (abs(DOMAIN[0]) + abs(DOMAIN[1])) / ELEMS

def generate_data():
    print(f"1 {ELEMS} {DOMAIN[0]} {DOMAIN[1]} {ELEMS}")
    for i in np.arange(DOMAIN[0], DOMAIN[1]+1, step):
        print(f"{i} {f(i)}")

def generate_data4():
    print(f"2 {ELEMS} {DOMAIN[0]} {DOMAIN[1]} {ELEMS}")
    for i in np.arange(DOMAIN[0], DOMAIN[1]+1, step):
        print(f"{i} {i} {f4(i, i)}")

def generate_data5():
    print(f"1 {ELEMS} {DOMAIN[0]} {DOMAIN[1]} {ELEMS}")
    for i in np.arange(DOMAIN[0], DOMAIN[1]+1, step):
        print(f"{i} {i} {f5(i, i)}")

def generate_data6():
    print(f"2 {ELEMS} {DOMAIN[0]} {DOMAIN[1]} {ELEMS}")
    for i in np.arange(DOMAIN[0], DOMAIN[1]+1, step):
        print(f"{i} {i} {f6(i, i)}")

generate_data6()

txt = "((X1  / (X1  / (((((0.7845674099000473 * X1 ) * (X1  * X1 )) / (((((((((4.54764227044873 / ((((-4.696552661115787 * (9.166920014073014 * X1 )) * 3.5913392661691574) + 9.306014002164936) + 3.1638304846399485)) + 6.065465207793011) + X1 ) + (39.23138307567982 / (-2.6702624120203717 * ((((-9.50163455662649 - ((X1  / 2.1303209803318026) * X1 )) / 0.45905987754110633) + -8.731132650704478) + -3.509051337343286)))) * -7.269165676445022) / -1.358119114476958) + (15.834327514258351 - (((3.7630748605486826 * (((1.7868121654375742 * ((0.7845674099000473 * X1 ) * (X1  * X1 ))) / -12.063037077492663) * 3.1638304846399485)) / -3.2618676579193977) + -3.2068274796430027))) / (-4.696552661115787 - (((((X1  + 8.043121145266454) * 2.8125632783287617) + -28.271799701342097) + X1 ) + (4.81319834453564 * (-4.813386280500076 * X1 ))))) - -17.79915068535686)) - 7.612339744824268) + (X1  * 3.7594917208429397)))) + (-9.497890630171334 + ((((11.813460947871643 - (((3.1638304846399485 * (3.1638304846399485 * (3.5913392661691574 * X1 ))) + 0.5515236234342389) + -3.2068274796430027)) + (7.41638065178245 / (X1  / (66.3640129365287 / (-2.6702624120203717 * ((((-9.50163455662649 - ((X1  / 2.1303209803318026) * X1 )) / 0.45905987754110633) + -8.731132650704478) + 3.9231562283038555)))))) / -7.269165676445022) * (X1  * X1 ))))"
def dots_to_commas(txt: str):
    txt = txt.replace("X1", "C2")
    print( txt.replace('.', ','))

# dots_to_commas(txt)
